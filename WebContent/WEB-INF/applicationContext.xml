<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- 扫描注解，同时应该是不要扫描Controller，以使用MVC -->
	<context:component-scan base-package="com.ihome">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- <context:annotation-config /> -->
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<!-- override these for application-specific URLs if you like:-->
<!-- 	    <property name="loginUrl" value="/login.jsp"/>
	    <property name="successUrl" value="/home.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <property name="filterChainDefinitions">
	    	<value>
	    		#some example
   		       	#/admin/** = authc, roles[admin]
            	#/docs/** = authc, perms[document:read]
           	 	#/** = authc
           	 	# more URL-to-FilterChain definitions here
	    	</value>
	    </property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="myRealm"/>
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<bean id="myRealm" class="com.ihome.realm.SimpleTestRealm">
	</bean>
	
	<!-- 使能shiro注解 -->
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
    
    
    <!-- HSQL DataSource -->
    <bean id="hqlSQLdataSource" class="org.hsqldb.jdbc.JDBCDataSource">
        <property name="url" value="jdbc:hsqldb:hsql://localhost"></property>
        <property name="user" value="sa"></property>
        <property name="password" value=""></property>
    </bean>
    
    <!-- c3po的数据库连接池 -->
    <bean id="c3poDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--zeroDateTimeBehavior=convertToNull 不用的话会在0000-00-00转换出错  -->
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ihome?zeroDateTimeBehavior=convertToNull" />
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
         <!-- 记得同时切换hibernate.dialect。不然会失败。
        <property name="jdbcUrl" value="jdbc:hsqldb:hsql://localhost" />
        <property name="driverClass" value="org.hsqldb.jdbc.JDBCDriver" />
        -->
        <property name="user" value="root" />
        <property name="password" value="520luyasi" />
        <!-- 数据连接没有时，一次获取的连接数 -->
        <property name="acquireIncrement" value="3"/> 
        <property name="maxPoolSize" value="20" />
        <property name="minPoolSize" value="1" />
        <property name="initialPoolSize" value="2" />
        <!-- 在数据28800之前关闭自己的先 -->
        <property name="maxIdleTime" value="25000" />
        <!-- 测试连接可用周期 -->
        <property name="idleConnectionTestPeriod" value="25000" /> 
        <!-- 每次取连接前测试是否可用 -->
        <property name="testConnectionOnCheckout" value="true" /> 
    </bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="c3poDataSource" />
        <property name="hibernateProperties">
            <props>
                <!-- <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>  -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!-- JDBC connection pool (use the built-in) -->
                <prop key="connection.pool_size">1</prop>
                <!-- Disable the second-level cache -->
                <prop key="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>        
                <!-- 前面需要加个hibernate才可以的说。。 create-drop, update-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.ihome.entity</value>
            </list>
        </property>
    </bean>
    
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager"
        abstract="false" lazy-init="default" autowire="default">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
    
    <!-- 事务管理配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" rollback-for="Exception" />
            <tx:method name="*" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config proxy-target-class="true">
        <aop:advisor
            pointcut="execution(* com.ihome.dao.*.*(..))"
            advice-ref="txAdvice" />
    </aop:config>
</beans>